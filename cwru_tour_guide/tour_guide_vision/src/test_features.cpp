#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <sensor_msgs/Image.h>
#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <tf/transform_listener.h>
#include <image_geometry/pinhole_camera_model.h>
#include <cv_bridge/CvBridge.h>
#include <string>
#include <vector>
#include "cwru_features.h"



int main(int argc, char *argv[]){
  
  ros::init(argc, argv, "vision_test");
  
  double values [50*8]= {-3.052920, -4.205021, 1.604375, 252.324570, 262.113068, -0.129833, 0.074272, 0.988750, 
  -3.052920, -4.205021, 1.604375, 252.324081, 262.115356, -0.129834, 0.074276, 0.988750, 
  -3.052920, -4.205021, 1.604375, 252.317215, 262.105499, -0.129846, 0.074258, 0.988750, 
  -3.052920, -4.205021, 1.604375, 252.321762, 262.117188, -0.129838, 0.074279, 0.988749, 
  -3.052920, -4.205021, 1.604375, 252.326965, 262.109894, -0.129829, 0.074266, 0.988751, 
  -3.052920, -4.205021, 1.604375, 252.312164, 262.090729, -0.129855, 0.074232, 0.988750, 
  -3.052920, -4.205021, 1.604375, 252.318802, 262.092590, -0.129843, 0.074236, 0.988752, 
  -3.052920, -4.205021, 1.604375, 252.321518, 262.106537, -0.129838, 0.074260, 0.988750, 
  -3.052920, -4.205021, 1.604375, 252.320511, 262.089569, -0.129840, 0.074230, 0.988752, 
  -3.052920, -4.205021, 1.604375, 252.317123, 262.088165, -0.129846, 0.074228, 0.988752, 
  -3.052920, -4.205021, 1.604375, 252.331268, 262.089172, -0.129822, 0.074230, 0.988755, 
  -3.052920, -4.205021, 1.604375, 252.313873, 262.087128, -0.129852, 0.074226, 0.988751, 
  -3.052920, -4.205021, 1.604375, 252.314651, 262.086823, -0.129851, 0.074225, 0.988751, 
  -3.052920, -4.205021, 1.604375, 252.320221, 262.097046, -0.129841, 0.074244, 0.988751, 
  -3.052920, -4.205021, 1.604375, 252.318451, 262.080872, -0.129844, 0.074215, 0.988753, 
  -3.052920, -4.205021, 1.604375, 252.324982, 262.086548, -0.129833, 0.074225, 0.988754, 
  -3.052920, -4.205021, 1.604375, 252.323364, 262.090515, -0.129835, 0.074232, 0.988753, 
  -3.052920, -4.205021, 1.604375, 252.324234, 262.072845, -0.129834, 0.074201, 0.988755, 
  -3.052920, -4.205021, 1.604375, 252.322723, 262.082184, -0.129837, 0.074217, 0.988754, 
  -3.052920, -4.205021, 1.604375, 252.320206, 262.093048, -0.129841, 0.074237, 0.988752, 
  -3.052920, -4.205021, 1.604375, 252.325012, 262.079803, -0.129833, 0.074213, 0.988755, 
  -3.052920, -4.205021, 1.604375, 252.319504, 262.089264, -0.129842, 0.074230, 0.988752, 
  -3.052920, -4.205021, 1.604375, 252.321579, 262.096649, -0.129838, 0.074243, 0.988752, 
  -3.052920, -4.205021, 1.604375, 252.325058, 262.080048, -0.129833, 0.074214, 0.988755, 
  -3.052920, -4.205021, 1.604375, 252.321777, 262.077515, -0.129838, 0.074209, 0.988754, 
  -3.052920, -4.205021, 1.604375, 252.316727, 262.075165, -0.129847, 0.074205, 0.988753, 
  -3.052920, -4.205021, 1.604375, 252.314453, 262.077972, -0.129851, 0.074210, 0.988753, 
  -3.052920, -4.205021, 1.604375, 252.317459, 262.085724, -0.129846, 0.074224, 0.988752, 
  -3.052920, -4.205021, 1.604375, 252.314896, 262.082733, -0.129850, 0.074218, 0.988752, 
  -3.052865, -4.206723, 1.602270, 251.911072, 262.508606, -0.130549, 0.074962, 0.988604, 
  -3.052822, -4.208095, 1.602087, 251.555862, 262.676086, -0.131168, 0.075250, 0.988500, 
  -3.052785, -4.209327, 1.601978, 251.433029, 262.851135, -0.131379, 0.075557, 0.988449, 
  -3.052785, -4.209327, 1.602073, 251.463715, 262.760864, -0.131327, 0.075398, 0.988468, 
  -3.052785, -4.209327, 1.602073, 251.430252, 262.837219, -0.131384, 0.075532, 0.988450, 
  -3.052785, -4.209327, 1.602073, 251.424698, 262.846649, -0.131394, 0.075549, 0.988447, 
  -3.052785, -4.209327, 1.602073, 251.405136, 262.844086, -0.131428, 0.075544, 0.988443, 
  -3.052785, -4.209327, 1.602073, 251.398956, 262.857269, -0.131439, 0.075567, 0.988440, 
  -3.053360, -4.191807, 1.604383, 250.757080, 261.633270, -0.132582, 0.073399, 0.988451, 
  -3.054743, -4.154261, 1.612549, 253.974838, 256.210968, -0.127036, 0.063884, 0.989839, 
  -3.048385, -4.105381, 1.648221, 268.057465, 254.312500, -0.102266, 0.060704, 0.992903, 
  -3.056063, -4.035317, 1.669365, 280.661804, 248.076660, -0.079956, 0.049741, 0.995557, 
  -3.056524, -3.952491, 1.632904, 256.887115, 233.102707, -0.122145, 0.022949, 0.992247, 
  -3.042995, -3.815595, 1.562084, 221.793900, 212.864563, -0.183090, -0.012917, 0.983011, 
  -3.058866, -3.682837, 1.532846, 198.824493, 186.269272, -0.221527, -0.059181, 0.973357, 
  -3.047856, -3.536113, 1.519299, 180.734360, 156.681412, -0.250253, -0.109496, 0.961969, 
  -3.042715, -3.438142, 1.515651, 170.712357, 131.865463, -0.264943, -0.150763, 0.952405, 
  -3.037528, -3.269139, 1.525055, 168.534546, 86.385353, -0.264551, -0.224882, 0.937785, 
  -3.032944, -3.065822, 1.537795, 144.157364, 1.727631, -0.290452, -0.348852, 0.891033, 
  -3.032374, -2.916307, 1.543726, 143.686066, 0.703189, -0.290978, -0.350211, 0.890328, 
  -3.052677, -2.869118, 1.543943, 143.769318, 0.914005, -0.290890, -0.349929, 0.890468};
  
  printf("starting\n");
  FeatureManager testing;
  
  for(int i=0;i<50*8;i+=8){
    testing.add( RawFeature(values[i],values[i+1],values[i+2],cv::Point2d(values[i+3],values[i+4]),cv::Point3d(values[i+5],values[i+6],values[i+7])));
  //  testing.raw_features[i/8].print();
  }



  cv::Mat camera2robot_axis=cv::Mat::zeros(3,3,CV_64F);
  camera2robot_axis.at<double>(0,2)=1;
  camera2robot_axis.at<double>(1,0)=1;
  camera2robot_axis.at<double>(2,1)=1;
  
  
  cv::Mat camera_frame_offset=cv::Mat::zeros(3,1,CV_64F);
  camera_frame_offset.at<double>(0,0)=.06;
  
  testing.raw_features[0].calcRay(camera2robot_axis, 0, -35 * 3.1415926535/180, 0, camera_frame_offset);
  
  testing.raw_features[0].print();

  double error=testing.calc_least_squares_position(camera2robot_axis, 0, -35*3.1415926535/180, 0, camera_frame_offset);
  
  printf("error %f\n",error);
  printf("stopping\n");
  return 0;
}
