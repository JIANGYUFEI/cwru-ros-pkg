class update_cwru_wsn_steering_DesiredState_395767a0c42838fad3bdc73bbad2244d(MessageUpdateRule):
	old_type = "cwru_wsn_steering/DesiredState"
	old_full_text = """
Header header
float32 x
float32 y
float32 theta
float32 rho
float32 v

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	new_type = "cwru_wsn_steering_msgs/DesiredState"
	new_full_text = """
Header header
float32 x
float32 y
float32 theta
float32 rho
float32 v

================================================================================
MSG: roslib/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""

	order = 0
	migrated_types = [
		("Header","Header"),]

	valid = True

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		new_msg.x = old_msg.x
		new_msg.y = old_msg.y
		new_msg.theta = old_msg.theta
		new_msg.rho = old_msg.rho
		new_msg.v = old_msg.v
